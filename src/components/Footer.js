import { useState } from 'react'
import '../styles/Footer.css'

function Footer() {
    // J'utilise le hook d'√©tat 'useState' pour cr√©er une variable d'√©tat appel√©e 'inputValue'
    // Au d√©part, 'inputValue' est initialis√©e avec une cha√Æne de caract√®res vide ('')
    const [inputValue, setInputValue] = useState('')

    // 'setInputValue' est une fonction qui me permettra de mettre √† jour la valeur de 'inputValue'
    // Elle sera utilis√©e pour changer la valeur de 'inputValue' plus tard dans le composant

    // En r√©sum√©, dans cette partie, j'initialise une variable 'inputValue' √† une cha√Æne de caract√®res vide,
    // et je cr√©e √©galement une fonction 'setInputValue' qui me permettra de mettre √† jour cette variable par la suite.



	function handleInput(e) {
		setInputValue(e.target.value)
	}
	// Cette fonction est appel√©e chaque fois que le texte dans le formulaire change. Elle prend l'√©v√©nement 'e' en param√®tre, qui repr√©sente le changement, et extrait la nouvelle valeur du champ de texte avec 'e.target.value'. Ensuite, elle utilise 'setInputValue' pour mettre √† jour une variable ou un √©tat dans le composant avec cette nouvelle valeur. En r√©sum√©, cette fonction permet de r√©agir aux changements dans le formulaire en mettant √† jour la valeur stock√©e dans 'setInputValue'.




	function handleBlur() {
    // Cette fonction 'handleBlur' est appel√©e lorsque l'utilisateur d√©place le focus en dehors de l'√©l√©ment HTML associ√©
    // Elle est g√©n√©ralement utilis√©e dans le contexte d'un champ de saisie, comme un champ d'adresse e-mail

    // La condition suivante est √©valu√©e : si 'inputValue' ne contient pas le caract√®re '@'
    if (!inputValue.includes('@')) {
        // Alors, une bo√Æte de dialogue de type alert est affich√©e √† l'utilisateur
        // Cette alerte lui signale que l'adresse e-mail qu'il a saisie ne contient pas le caract√®re '@'
        alert("Attention, il n'y a pas d'@, ceci n'est pas une adresse valide üò•")
    }

    // En r√©sum√©, la fonction 'handleBlur' est utilis√©e pour v√©rifier si l'adresse e-mail saisie dans un champ de saisie
    // contient le caract√®re '@'. Si ce n'est pas le cas, une alerte est affich√©e pour avertir l'utilisateur que l'adresse
    // n'est pas valide.
	}


	return (
		<footer className='lmj-footer'>
			{/* Ce composant 'footer' contient trois √©l√©ments : deux phrases et un champ de saisie ('input') */}
			
			<div className='lmj-footer-elem'>
				{/* Le premier √©l√©ment est une phrase qui indique que ce composant s'adresse aux passionn√©s de plantes */}
				Pour les passionn√©¬∑e¬∑s de plantes üåøüå±üåµ
			</div>
			
			<div className='lmj-footer-elem'>
				{/* Le deuxi√®me √©l√©ment est une phrase qui invite l'utilisateur √† laisser son adresse e-mail */}
				Laissez-nous votre mail :
			</div>
			
			<input
				placeholder='Entrez votre mail'
				onChange={handleInput}
				value={inputValue}
				onBlur={handleBlur}
			/>
			{/* Le troisi√®me √©l√©ment est un champ de saisie ('input') pour que l'utilisateur entre son adresse e-mail.
			Il a plusieurs attributs :
			- 'placeholder' qui affiche un texte indicatif dans le champ de saisie
			- 'onChange' qui est une fonction 'handleInput' qui r√©agit lorsque le contenu du champ de saisie change
			- 'value' qui est associ√© √† la variable 'inputValue' pour afficher le contenu actuel du champ
			- 'onBlur' qui est une fonction 'handleBlur' qui r√©agit lorsque l'utilisateur d√©place le focus en dehors du champ de saisie
			*/}
		</footer>
	)
	
}

export default Footer

/*En r√©sum√©: Ce code est un composant React nomm√© Footer qui repr√©sente le pied de page d'une application web. Voici un r√©sum√© de ce que fait ce code :

Il importe la fonction useState de la biblioth√®que React et des styles CSS depuis un fichier externe.

Dans le composant Footer, il utilise le hook useState pour cr√©er une variable d'√©tat appel√©e inputValue et l'initialise avec une cha√Æne de caract√®res vide ''. Cette variable d'√©tat est utilis√©e pour stocker la valeur d'un champ de saisie.

Le composant d√©finit √©galement deux fonctions :

handleInput(e): Cette fonction est appel√©e chaque fois que le texte dans un formulaire change. Elle extrait la nouvelle valeur du champ de texte √† partir de l'√©v√©nement e et utilise la fonction setInputValue pour mettre √† jour la variable d'√©tat inputValue avec cette nouvelle valeur.
handleBlur(): Cette fonction est g√©n√©ralement appel√©e lorsque l'utilisateur d√©place le focus en dehors du champ de saisie. Elle v√©rifie si la valeur actuelle de inputValue contient le caract√®re '@' (typiquement pour valider une adresse e-mail) et affiche une alerte si ce n'est pas le cas.
Dans la partie de rendu du composant, il cr√©e un √©l√©ment de pied de page (<footer>) avec trois √©l√©ments enfants :

Deux √©l√©ments <div> qui affichent des phrases.
Un champ de saisie (<input>) o√π l'utilisateur peut entrer une adresse e-mail. Il est configur√© avec des attributs tels que placeholder, onChange, value, et onBlur pour g√©rer la saisie de l'utilisateur et les r√©actions aux √©v√©nements.
En r√©sum√©, ce composant React repr√©sente le pied de page d'une application web et permet aux utilisateurs d'entrer leur adresse e-mail tout en fournissant une v√©rification simple pour s'assurer que l'adresse e-mail contient le caract√®re '@'.
*/






